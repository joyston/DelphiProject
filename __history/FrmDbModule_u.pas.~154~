// Database operations
unit FrmDbModule_u;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Dialogs, Vcl.Forms;

type
  Tdbmodule = class(TDataModule)
    mainConnection: TFDConnection;
    qryUsers: TFDQuery;
    dsUsers: TDataSource;
    qryDiary: TFDQuery;
    dsDiary: TDataSource;
    tblDiary: TFDTable;
    tblUsers: TFDTable;
    tblDiary_id: TFDAutoIncField;
    tblDiaryuser_fkid: TIntegerField;
    tblDiarylogdate: TDateField;
    tblDiarylog: TStringField;
    tblDiarylogtime: TTimeField;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private
    { Private declarations }
    fUserId: Integer;
    procedure ConnectToDb();
  public
    { Public declarations }
    function GetLogId(const _UserId: Integer; const _LogDate: TDate): Integer;

    procedure GetUserLogs(const _UserId: Integer);
    procedure InsertInDiary(const _UserId: Integer; const _LogDate: TDate;
      const _Log: string; const _LogTime: TTime);
    procedure SetUserId(const _UserName, _PassWord: string);
    procedure UpdateDiary(const _LogId, _UserId: Integer; const _LogDate: TDate;
      const _Log: string; const _LogTime: TTime);

    Property UserId: Integer read fUserId;
  end;

var
  dbmodule: Tdbmodule;

implementation

uses frmLogIn_u, inifiles;

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}

function Tdbmodule.GetLogId(const _UserId: Integer;
  const _LogDate: TDate): Integer;
begin
  //Result := mainConnection.ExecSQLScalar('select _id from diary where' +
  //  ' user_fkid=:UId and logdate=:LD', [_UserId, _LogDate]);

  //Using Tables
  tblUsers.Filtered := false;
  tblUsers.Filter := 'user_fkid =' + IntToStr(_UserId);
  tblUsers.Filter := 'logdate =' + DateToStr(_LogDate);
  tblUsers.Filtered := true;
  Result := tblUsers.FieldByName('_id').AsInteger;
end;

procedure Tdbmodule.ConnectToDb();
var
  appINI: TIniFile;
begin
  appINI := TIniFile.Create(ExtractFilePath(Application.ExeName) +
    'dbconfig.ini');
  try
    try
      // Read Db info from INF file
      with mainConnection do
      begin
        Connected := false;
        Params.Clear;
        DriverName := appINI.ReadString('DB-INFO', 'DriverID', '');
        Params.values['Database'] := appINI.ReadString('DB-INFO',
          'Database', '');
        Params.values['Server'] := appINI.ReadString('DB-INFO', 'Server', '');
        Params.values['User_name'] := appINI.ReadString('DB-INFO',
          'User_Name', '');
        Params.values['Password'] := appINI.ReadString('DB-INFO',
          'Password', '');
        Params.values['Port'] := appINI.ReadString('DB-INFO', 'Port', '');
        Connected := true;
      end;

      { if not dbmodule.mainConnection.Connected then
        Result := False
        else
        Result := True; }
    Except
      on E: Exception do
      begin
        ShowMessage(E.Message);
        // Result := False;
      end;
    end;
  finally
    FreeAndNil(appINI);
  end;
end;

procedure Tdbmodule.GetUserLogs(const _UserId: Integer);
begin
  try
    { Code using TFDQuery
      dbmodule.qryDiary.SQL.Text := 'Select * from diary where user_fkid='
      //    + IntToStr(userIdvar) + ';';
      //dbmodule.qryDiary.Open; }

    // Using TFDTable
    tblDiary.Filter := 'user_fkid =' + IntToStr(_UserId);
    tblDiary.Filtered := true;
  Except
    on E: Exception do
    begin
      ShowMessage(E.Message);
    end;
  end;
end;

procedure Tdbmodule.InsertInDiary(const _UserId: Integer; const _LogDate: TDate;
  const _Log: string; const _LogTime: TTime);
begin
  // dbmodule.mainConnection.ExecSQL('Insert into diary(user_fkid, logdate, log,'
  // + ' logtime) values(:Id, :LD, :Lg, :Lt)', [userId, logDate, log, logTime]);

  // Using TFDTable
  tblDiary.Append;
  tblDiary.FieldByName('user_fkid').AsInteger := _UserId;
  tblDiary.FieldByName('logdate').AsDateTime := _LogDate;
  tblDiary.FieldByName('log').AsString := _Log;
  tblDiary.FieldByName('logtime').AsDateTime := _LogTime;
  tblDiary.Post;
end;

// Get a scalar value from DB
procedure Tdbmodule.SetUserId(const _UserName, _PassWord: string);
begin
  fUserId := mainConnection.ExecSQLScalar('select _id from users where' +
    ' username=:username and password=:password', [_UserName, _PassWord]);
end;

procedure Tdbmodule.UpdateDiary(const _LogId, _UserId: Integer;
  const _LogDate: TDate; const _Log: string; const _LogTime: TTime);
begin
//  mainConnection.ExecSQL('Update diary set log=:LG, logtime=:LT WHERE _id=:LID'
//    + ' and user_fkid=:UId and logdate=:LD', [_Log, _LogTime, _LogId, _UserId,
//    _LogDate]);

  //Update Using TFDTable
//  tblDiary.Filtered := false;
//  tblDiary.Filter := 'user_fkid =' + IntToStr(_UserId);
//  tblDiary.Filter := 'logdate =' + DateToStr(_LogDate);
//  tblDiary.Filtered := true;
  tblDiary.Edit;
  tblDiary.FieldByName('log').AsString := _Log;
  tblDiary.FieldByName('logtime').AsDateTime := _LogTime;
  tblDiary.Post;
end;

procedure Tdbmodule.DataModuleCreate(Sender: TObject);
var
  lField: TField;
begin
  fUserId := 0;
  ConnectToDb();

  tblUsers.TableName := 'users';
  tblUsers.Open;

  tblDiary.TableName := 'diary';
  {
  lField := TField.Create(tblDiary);
  lField.FieldName := 'logtime';
  lField.FieldKind := TFieldKind.fkData;
  lField.DataSet := tblDiary;
  lField.DisplayName := 'LogTime';
  tblDiary.Fields.Add(lField); }

  tblDiary.Open;
end;

procedure Tdbmodule.DataModuleDestroy(Sender: TObject);
begin
  tblUsers.Close;
  tblDiary.Close;
  mainConnection.Connected := false;
end;

end.
